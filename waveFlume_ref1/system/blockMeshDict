/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  1.5                                   |
|   \\  /    A nd           | Web:      http://www.OpenFOAM.org               |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

scale 1;

#include "../myVars" //Include global variables

x1 0;
x2 $Lg;
x3 #calc "$Lg + $Lp";
x4 #calc "$Lg + $Lp + $La";

y1 #calc "-$water_depth";
y2 $height_y;
z1 0;
z2 0.1;

// Compute cell sizes before refinement
dy #calc "($wave_height/$CPH)*pow(2,$ref_level)";
dx #calc "$dy*$aspect_ratio";

// Compute n elements
ny_p #calc "round(abs($y2-($y1))/$dy)";
nx_p #calc "round($Lp/$dx)";

// Expansion ratios
exp_g #calc "$aspect_ratio/$aspect_ratio_max";
exp_a #calc "$aspect_ratio_max/$aspect_ratio";


//only to use when the expansion ratio is 1
//nx_g #calc "round($Lg/$dx)";
//nx_a #calc "round($La/$dx)";


// You can use https://openfoamwiki.net/index.php/Scripts/blockMesh_grading_calculation for help
// Expansion ratio formulas from https://www.cfd-online.com/Forums/openfoam/233981-how-find-expension-ratio-between-2consecutive-cells-planar-abrupt-contraction.html
beta_g #calc "($Lg - $dx/$exp_g)/($Lg - $dx)";
nx_g    #calc "round(abs(1+log($exp_g)/log($beta_g)))";

nx_a    #calc "round($nx_g*$La/$Lg)";

vertices        
(
    // Wave propagation zone block
    ( $x2 $y1 $z1 ) // 0
    ( $x3 $y1 $z1 ) // 1 
    ( $x2 $y2 $z1 ) // 2
    ( $x3 $y2 $z1 ) // 3
                  
    ( $x2 $y1 $z2 ) // 4
    ( $x3 $y1 $z2 ) // 5
    ( $x2 $y2 $z2 ) // 6
    ( $x3 $y2 $z2 ) // 7    
   
    // Wave generation zone 
    ( $x1 $y1 $z1 ) // 8
    ( $x1 $y2 $z1 ) // 9

    ( $x1 $y1 $z2 ) // 10
    ( $x1 $y2 $z2 ) // 11
    
    // Wave absorption zone 
    ( $x4 $y1 $z1 ) // 12
    ( $x4 $y2 $z1 ) // 13  

    ( $x4 $y1 $z2 ) // 14
    ( $x4 $y2 $z2 ) // 15

);

blocks          
(
    hex (0 1 3 2 4 5 7 6) ( $nx_p $ny_p 1 ) simpleGrading (1 1 1) // Wave propagation zone
    hex (8 0 2 9 10 4 6 11) ($nx_g $ny_p 1) simpleGrading ($exp_g 1 1) // Wave generation zone
    hex (1 12 13 3 5 14 15 7) ($nx_a $ny_p 1) simpleGrading ($exp_a 1 1) // Wave absorption zone
);

edges           
(
);

patches         
(
    patch inlet
    (
        (8 9 11 10)
    )
    wall bottom 
    (
        (8 10 4 0)
        (0 4 5 1)
        (1 5 14 12)
    )
    patch outlet
    (
        (14 15 13 12)
    )

    patch atmosphere 
    (
        (11 9 2 6)
        (6 2 3 7)
        (7 3 13 15)
    )
    
    symmetry frontBack
    (
        (0 2 9 8)
        (1 3 2 0)
        (12 13 3 1)

        (10 11 6 4)
        (4 6 7 5)
        (5 7 15 14)
    )
);

mergePatchPairs
(
);

// ************************************************************************* //
